import org::eclipse::emf::ecore;
import org::applause::applausedsl::applauseDsl;

extension templates::MetamodelExtensions;

String basePackage():
	"de.itemis";
	
String packageName(org::eclipse::emf::ecore::EObject this):
	basePackage() + "." + this.application().name.toLowerCase();
	
String toPath(String packageName):
	packageName.replaceAll("\\.", "/");
	
String className(String this):
	this.toFirstUpper();

String getterName(String this):
	"get" + this.toFirstUpper();
	
String setterName(String this):
	"set" + this.toFirstUpper();
	
String fieldName(String this):
	this.toFirstLower();
	
String returnType(Property this):
	this.typeDescription().many 
		? "ArrayList <" + this.typeDescription().type.name + ">"
		: this.typeDescription().type.name;

entityClassName(Entity this):
	name;

entityFileName(Entity this):
	packageName().toPath() + "/" + entityClassName() + ".java";

manifestFileName():
	"../AndroidManifest.xml";
		
applicationActivityClassName(Application this):
	"ApplicationActivity";

applicationActivityFileName(Application this):
	packageName().toPath() + "/" + applicationActivityClassName() + ".java";
	
activityClassName(View this):
	this.name;

activityFileName(SectionedView this):
	packageName().toPath() + "/" + activityClassName() + ".java";
	
listActivityClassName(SectionCell this):
	activityClassName((SectionedView)this.eContainer().eContainer());
	
javaBaseClassName(SectionedView this):
	"ERROR";
	
javaBaseClassName(TableView this):
	"GenericListActivity";
	
javaBaseClassName(DetailsView this):
	"DetailsActivity";

providerClassName(ContentProvider this):
	name + "Provider";
	
providerFileName(ContentProvider this):
	packageName().toPath() + "/" + providerClassName() + ".java";
	
providerType(ContentProvider this):
	this.type.name;
	
providerBaseClassName(ContentProvider this):
	(this.many)
		? "GenericListContentProvider"
		: "GenericItemContentProvider";

List[String] xmlPathElements(ContentProvider this):
	this.selection.xmlPathElements();
	
private List[String] xmlPathElements(ScalarExpression this):
	this.xmlPathElements();

private List[String] xmlPathElements(StringLiteral this):
	this.value.xmlPathElements();
	
List[String] xmlPathElements(String this):
	this.split("\\.");
	
String javaType(CollectionExpression this):
	"ERROR-javatype-" + this.metaType;
	
String javaType(StringSplit this):
	"String";
	
String javaType(ObjectReference this):
	tail==null?javaType(object):javaType(tail);

private TypeDescription typeDescription(VariableDeclaration this):
	JAVA org.applause.applausedsl.scoping.TypeUtil.getTypeOf(org.applause.applausedsl.applauseDsl.VariableDeclaration);

String javaType(VariableDeclaration this):
	typeDescription().type.name;

String javaType(SectionCell this):
	iterator==null?"Void":iterator.collection.javaType();
	
String expression(Expression this, String prefix):
	"Error"+metaType;
	
String expression(CollectionExpression this, String prefix):
	"ERROR-expression-Collection";	
	
String expression(ScalarExpression this, String prefix):
	"ERROR-expression-Scalar";
	
String expression (StringLiteral this, String prefix):
	"\"" + this.value + "\"";
	
String expression(StringFunction this, String prefix):
	"ERROR-expression-StringFunction";
	
String expression(StringSplit this, String prefix):
	'Splitter.on(' + delimiter.expression(prefix) + ').split(' + value.expression(prefix) + ')';
	
String expression(StringConcat this, String prefix):
	this.values.expression(prefix).toString(" + ");

String expression(StringReplace this, String prefix):
	"replace(" + this.value.expression(prefix) + ", " + "" + this.match.expression(prefix) + ", " + this.replacement.expression(prefix) + ")";
	
String expression(StringUrlConform this, String prefix):
	"urlconform(" + this.value.expression(prefix) + ")";
	
private String getterPath(ObjectReference this):
	"." + this.object.name.getterName() + "()" + (tail==null?"":tail.getterPath());
	
String expression(ObjectReference this, String prefix):
	this.object.name + (tail==null?"":tail.getterPath());
	
